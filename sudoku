#include <iostream>
using namespace std;

// Constants
const int SIZE = 9;

// Function to print the Sudoku grid
void printGrid(int grid[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << grid[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if a digit can be placed at a specific position in the grid
bool canPlace(int grid[SIZE][SIZE], int row, int col, int digit) {
    // Check row and column
    for (int i = 0; i < SIZE; i++) {
        if (grid[row][i] == digit || grid[i][col] == digit) {
            return false;
        }
    }

    // Check 3x3 sub-grid
    int startRow = row - (row % 3);
    int startCol = col - (col % 3);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[startRow + i][startCol + j] == digit) {
                return false;
            }
        }
    }

    return true;
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int grid[SIZE][SIZE]) {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            if (grid[row][col] == 0) {
                // Try placing digits from 1 to 9
                for (int digit = 1; digit <= 9; digit++) {
                    if (canPlace(grid, row, col, digit)) {
                        grid[row][col] = digit;

                        if (solveSudoku(grid)) {
                            return true;
                        }

                        // Undo the current placement if it doesn't lead to a solution
                        grid[row][col] = 0;
                    }
                }

                // If no digit can be placed, backtrack
                return false;
            }
        }
    }

    // Puzzle is solved
    return true;
}

int main() {
    int grid[SIZE][SIZE] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    cout << "Sudoku Grid:" << endl;
    printGrid(grid);

    cout << endl << "Solving..." << endl;
    if (solveSudoku(grid)) {
        cout << endl << "Solution:" << endl;
        printGrid(grid);
    }
    else {
        cout << endl << "No solution exists." << endl;
    }

    return 0;
}
